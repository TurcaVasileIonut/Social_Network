package repository.database_repository;

import domain.User;
import domain.UserProfile;
import repository.Repository;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicInteger;

public class UsersRepository implements Repository<String, User> {

    String url;
    String username;
    String password;

    /**
     * Constructor for user repository manager in database
     * @param url - String - the url of database
     * @param username - String - the username for the database login
     * @param password - String - the password for the database login
     */
    public UsersRepository(String url, String username, String password){
        this.url = url;
        this.username = username;
        this.password = password;
    }

    /**
     * A parser for user fields from current position of resultSet
     * @param resultSet - ResultSet - reference for users list from db.
     * @return - User - current user from db
     * @throws Exception
     */
    public User getUserFromResultSet(ResultSet resultSet) throws Exception{
        String username = String.valueOf(resultSet.getObject("username"));
        String password = String.valueOf(resultSet.getObject("password"));
        String firstname = String.valueOf(resultSet.getObject("firstname"));
        String lastname = String.valueOf(resultSet.getObject("lastname"));
        String email = String.valueOf(resultSet.getObject("email"));
        String gender = String.valueOf(resultSet.getObject("gender"));

        return new User( username, password, firstname, lastname, email, gender);
    }

    /**
     * A parser for user fields from current position of resultSet
     * @param resultSet - ResultSet - reference for users list from db.
     * @return - User - current user from db
     * @throws Exception
     */
    public UserProfile getUserProfileFromResultSet(ResultSet resultSet) throws Exception{
        String username = resultSet.getString("username");
        String password = resultSet.getString("password");
        String firstname = resultSet.getString("firstname");
        String lastname = resultSet.getString("lastname");
        String email = resultSet.getString("email");
        String gender = resultSet.getString("gender");
        String description = resultSet.getString("description");
        String profilePicturePath = resultSet.getString("profilePicturePath");
        if(profilePicturePath.equals("null"))
            profilePicturePath = null;

        return new UserProfile( username, password, firstname, lastname, email, gender, description, profilePicturePath);
    }

    /**
     * A method that returns the user generated by the query
     * @param sqlQuery - String
     * @return User
     */
    public User getUserGeneratedByQuery(String sqlQuery){
        try(Connection connection = DriverManager.getConnection(this.url, this.username, this.password)) {
            PreparedStatement statement = connection.prepareStatement(sqlQuery);
            ResultSet resultSet = statement.executeQuery();
            if(resultSet.next())
                return getUserFromResultSet(resultSet);

        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    /**
     * A method that returns the UserProfile generated by the query
     * @param sqlQuery - String
     * @return User
     */
    public UserProfile getUseProfileGeneratedByQuery(String sqlQuery){
        try(Connection connection = DriverManager.getConnection(this.url, this.username, this.password)) {
            PreparedStatement statement = connection.prepareStatement(sqlQuery);
            ResultSet resultSet = statement.executeQuery();
            if(resultSet.next())
                return getUserProfileFromResultSet(resultSet);

        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    public Iterable<User> getIterableUsersGeneratedByQuery(String sqlQuery) {
        Collection<User> users = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(this.url, this.username, this.password)) {
            PreparedStatement statement = connection.prepareStatement(sqlQuery);
            ResultSet resultSet = statement.executeQuery();

            while(resultSet.next())
                users.add(getUserFromResultSet(resultSet));

            return users;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void executeQuery(String sqlQuery){
        try(Connection connection = DriverManager.getConnection(this.url, this.username, this.password)){
            PreparedStatement statement = connection.prepareStatement(sqlQuery);
            statement.executeQuery();
        }catch (Exception e){
            if(!e.getMessage().contains("No results were returned by the query"))
                throw new RuntimeException(e);
        }
    }

    public Iterable<String> getIdOfUsersByQuery(String sqlQuery){
        ArrayList<String> users = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(url, username, password)){
            PreparedStatement statement = connection.prepareStatement(sqlQuery);
            ResultSet resultSet = statement.executeQuery();
            while(resultSet.next()){
                users.add(resultSet.getString("username"));
            }

        }catch (Exception e){
            throw new RuntimeException(e.getMessage());
        }

        return users;
    }

    /**
     * Returns the user with chosen id from db
     * @param username - String - must be not null
     * @return - User - current user
     */
    @Override
    public User findById(String username){
        String sqlQuery = "Select * from Users where username = '" + username + "'";
        return getUserGeneratedByQuery(sqlQuery);
    }

    /**
     * Returns the user with chosen id from db
     * @param username - String - must be not null
     * @return - User - current user
     */
    public UserProfile getUserProfileById(String username){
        String sqlQuery = "Select * from Users where username = '" + username + "'";
        return getUseProfileGeneratedByQuery(sqlQuery);
    }

    /**
     * Returns an iterable with all users from database
     * @return iterable < User > with all users from database
     */
    @Override
    public Iterable<User> findAll() {
        String sqlQuery = "Select * from Users";
        return getIterableUsersGeneratedByQuery(sqlQuery);
    }

    /**
     * Add a new user in the database
     * @param user - User - the entity we add
     * @return - User - null if the add operation was successfully executed
     *                - a User entity if there already is a user with user.id
     */
    @Override
    public User add(User user) {
        User existentUser = findById(user.getId());
        if(existentUser != null)
            return existentUser;

        String sqlQuery = "Insert into users(username, password, firstname, lastname, email, gender) " +
                "values('"+ user.getUsername() + "', '" + user.getPassword() + "', '" +  user.getFirstName() + "', '"
                + user.getLastName() + "', '" + user.getEmail() + "', '" + user.getGender() + "')";
        System.out.println(sqlQuery);
        executeQuery(sqlQuery);
        return null;
    }

    /**
     * Removes the user with user.id = id from database
     * @param id - Long - the id we want to delete
     * @return - User - the removed user
     */
    @Override
    public User remove(String id) {
        User removedUser = this.findById(id);
        if(removedUser == null)
            return null;
        String sqlQuery = "DELETE FROM Users WHERE id=" + id;
        executeQuery(sqlQuery);
        return removedUser;
    }

    /**
     * Update the user with user.id = id to entity
     * @param id - Long - the id of the entity
     * @param entity - User - the entity that will become the user with user.id = id
     */
    @Override
    public void updateEntity(String id, User entity) {
        this.remove(id);
        this.add(entity);
    }

    /**
     * Returns if the current id is available
     * @param id - Long  - the id we check
     * @return true if the id is available and false if there is already a user with chosen id
     */
    @Override
    public boolean availableId(String id) {
        User user = this.findById(id);
        return (user == null);
    }

    /**
     * Returns the number of users from database
     * @return - int - the number of users
     */
    @Override
    public int size() {
        AtomicInteger counter = new AtomicInteger();
        getIdOfUsersByQuery("Select * from users").forEach(username -> {
            counter.incrementAndGet();
        } );
        return counter.get();
    }

    public void updateDescription(String newDescription, String username) {
        String sqlQuery = "Update users set description = '" + newDescription + "' where username = '" + username + "'";
        executeQuery(sqlQuery);
    }

    public void changeProfilePicturePath(String newPath, String username) {
        String sqlQuery = "Update users set profilePicturePath = '" + newPath + "' where username = '" + username + "'";
        executeQuery(sqlQuery);
    }
}
