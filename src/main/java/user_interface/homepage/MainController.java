package user_interface.homepage;

import domain.Message;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import service.Services;
import user_interface.BaseController;
import user_interface.NotificationPopups;
import user_interface.scene_changer.HomepageSceneChanger;
import user_interface.scene_changer.LoginRegisterSceneChanger;
import utils.events.EventType;
import utils.events.MessageEvent;
import utils.events.UsersEvent;
import utils.observer.ObserverId;

import java.util.Objects;

public abstract class MainController extends BaseController  implements ObserverId<UsersEvent<String>, String> {

    protected String username;

    public void setButtonMessagesState(boolean pendingMessage){
        if(pendingMessage)
            buttonMessages.setId("main_button_highlighted");
        else
            buttonMessages.setId("main_button");
    }

    public void setUsername(String username){
        this.username = username;
        this.serviceMessages.getLastMessageFromEveryConversation(this.username).forEach(message -> {
            if(message.getReceiver().equals(this.username))
                if(!message.isReceived()) {
                    this.serviceMessages.setMessagesReceived(message);
                    setButtonMessagesState(true);
                }
        });
    }

    public String getUsername(){
        return this.username;
    }

    @FXML
    protected Button buttonHome;
    @FXML
    protected Button buttonLogout;
    @FXML
    protected Button buttonSearch;
    @FXML
    protected Button buttonNotification;
    @FXML
    protected Button buttonProfile;
    @FXML
    protected Button buttonMessages;

    /**
     * A method that will handle the event generated by pressing the home button
     */
    @FXML
    protected void clickHome(){
        try{
            //changeSceneToHome(idUser, buttonHome, this);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    protected void removeThisFromObservers(){
        serviceFriendships.removeObserver(this.username);
        serviceMessages.removeObserver(this.username);
    }

    /**
     * A method that will handle the event generated by pressing the logout button
     */
    @FXML
    protected void clickLogout(){
        System.out.println("LogoutClick");
        try{
            Stage stage = (Stage)buttonLogout.getScene().getWindow();
            Services services = new Services(serviceUsers, serviceFriendships, serviceMessages);
            removeThisFromObservers();
            LoginRegisterSceneChanger.changeSceneToLogin(stage, services);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    /**
     * A method that will handle the event generated by pressing the search button
     */
    @FXML
    protected void clickSearch(){
        try {
            Stage stage = (Stage)buttonSearch.getScene().getWindow();
            Services services = new Services(serviceUsers, serviceFriendships, serviceMessages);
            removeThisFromObservers();
            HomepageSceneChanger.changeSceneToHomeSearch(stage, username, services);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    /**
     * A method that will handle the event generated by pressing the notification button
     */
    @FXML
    public void clickNotification(){
        try{
            Stage stage = (Stage)buttonSearch.getScene().getWindow();
            Services services = new Services(serviceUsers, serviceFriendships, serviceMessages);
            removeThisFromObservers();
            HomepageSceneChanger.changeSceneToHomeNotifications(stage, username, services);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    @FXML
    public void clickMessages(){
        try{
            Stage stage = (Stage)buttonSearch.getScene().getWindow();
            Services services = new Services(serviceUsers, serviceFriendships, serviceMessages);
            removeThisFromObservers();
            HomepageSceneChanger.changeSceneToHomeInbox(stage, username,null, services);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    @FXML
    public void clickProfile(){
        try{
            Stage stage = (Stage)buttonProfile.getScene().getWindow();
            Services services = new Services(serviceUsers, serviceFriendships, serviceMessages);
            removeThisFromObservers();
            HomepageSceneChanger.changeSceneToHomeProfile(stage, username, username, services);
        }catch (Exception e){
            NotificationPopups.errorPopup(e.getMessage());
        }
    }

    @Override
    public void update(UsersEvent<String> event) {

    }

    @Override
    public void updateMessages(UsersEvent<String> event) {
        MessageEvent messageEvent = (MessageEvent) event;
        if(event.getTypeOfEvent() == EventType.ADD){
            Message message = messageEvent.getNewMessage();
            if(Objects.equals(message.getReceiver(), this.username)) {
                this.buttonMessages.setId("main_button_highlighted");
                this.serviceMessages.setMessagesReceived(message);
            }
        }
    }

    @Override
    public void updateFriendships(UsersEvent<String> event) {

    }

}
